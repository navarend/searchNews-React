{"version":3,"sources":["components/header.js","components/new.js","components/newsList.js","components/search.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","className","href","New","news","description","url","urlToImage","source","image","src","alt","name","target","rel","NewsList","map","resultNew","key","Search","state","category","changeCategory","e","setState","value","props","reviewNew","onChange","this","Component","App","checkNews","a","fetch","result","json","newsJson","articles","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAYeA,EATA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACX,yBAAKC,UAAU,mCACX,uBAAGC,KAAK,KAAKD,UAAU,cAAeD,KCuB/BG,EAzBH,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACHC,EAAgDD,EAAhDC,YAAaL,EAAmCI,EAAnCJ,MAAOM,EAA4BF,EAA5BE,IAAKC,EAAuBH,EAAvBG,WAAYC,EAAWJ,EAAXI,OACtCC,EAASF,EACZ,yBAAKN,UAAU,cAAa,yBAAKS,IAAMH,EAAaI,IAAMX,IAC1D,0BAAMC,UAAU,cAAeO,EAAOI,OACvC,KACH,OACG,yBAAKX,UAAU,iBACX,yBAAKA,UAAU,QACTQ,EACF,yBAAKR,UAAU,gBACX,4BAAMD,GACN,2BAAKK,IAET,yBAAKJ,UAAU,eACX,uBAAGC,KAAOI,EAAMO,OAAO,SAASC,IAAI,sBAAsBb,UAAU,gCAApE,wBCCJc,EAfE,SAAC,GAAD,IAAGX,EAAH,EAAGA,KAAH,OAEb,yBAAKH,UAAU,OACTG,EAAKY,IAAK,SAAAC,GAAS,OACjB,kBAAC,EAAD,CACIC,IAAQD,EAAUX,IAClBF,KAASa,QCkCVE,E,2MAxCXC,MAAQ,CACJC,SAAU,Y,EAGdC,eAAiB,SAAAC,GACd,EAAKC,SAAS,CACbH,SAAWE,EAAEV,OAAOY,OAClB,WACF,EAAKC,MAAMC,UAAU,EAAKP,MAAMC,a,wEAKhC,OACI,yBAAKpB,UAAU,cACX,yBAAKA,UAAU,wBACX,8BACI,qDACA,yBAAKA,UAAU,iCACX,4BAAQ2B,SAAWC,KAAKP,gBACpB,4BAAQG,MAAM,YAAd,YACA,4BAAQA,MAAM,iBAAd,iBACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,cAAd,uB,GA3BXK,aCkCNC,E,2MA/BbX,MAAQ,CACNhB,KAAO,I,EAOT4B,U,qBAAY,8CAAAC,EAAA,4DAAQZ,EAAR,+BAAmB,WACvBf,EADI,mEAC+De,EAD/D,qDAEWa,MAAM5B,GAFjB,cAEJ6B,EAFI,gBAGaA,EAAOC,OAHpB,OAGJC,EAHI,OAKV,EAAKb,SAAS,CACZpB,KAAOiC,EAASC,WANR,yC,mFAHVT,KAAKG,c,+BAcL,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,CAAQhC,MAAM,gBACd,yBAAKC,UAAU,kCACb,kBAAC,EAAD,CAAQ0B,UAAYE,KAAKG,YACzB,kBAAC,EAAD,CAAU5B,KAAOyB,KAAKT,MAAMhB,a,GAzBpB0B,aCOES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5e923c6b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = ({ title }) => (\r\n    <nav className=\"nav-wrapper light-blue darken-3\">\r\n        <a href=\"#!\" className=\"brand-logo\">{ title }</a>\r\n    </nav>\r\n);\r\nHeader.propTypes = {\r\n    title : PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst New = ({ news }) => {\r\n    const { description, title, url, urlToImage, source } = news;\r\n    const  image = (urlToImage) ? \r\n        <div className=\"card-image\"><img src={ urlToImage } alt={ title }></img>\r\n        <span className=\"card-title\">{ source.name }</span></div>       \r\n     : null;\r\n    return(\r\n       <div className=\"col s12 m6 l4\">\r\n           <div className=\"card\">\r\n               { image }\r\n               <div className=\"card-content\">\r\n                   <h3>{ title }</h3>\r\n                   <p>{ description }</p>\r\n               </div>\r\n               <div className=\"card-action\">\r\n                   <a href={ url } target=\"_blank\" rel=\"noopener noreferrer\" className=\"waves-effect waves-light btn\">See complete new</a>\r\n               </div>\r\n           </div>\r\n       </div>\r\n    );\r\n};\r\nNew.propTypes = {\r\n    news : PropTypes.object.isRequired\r\n}\r\n\r\nexport default New;","import React from \"react\";\r\nimport New from \"./new\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst NewsList = ({ news }) => (\r\n\r\n    <div className=\"row\">\r\n        { news.map( resultNew => (\r\n            <New \r\n                key = { resultNew.url }\r\n                news = { resultNew }\r\n            ></New>\r\n        ))}\r\n    </div>\r\n);\r\nNewsList.propTypes = {\r\n    news : PropTypes.array.isRequired\r\n}\r\n\r\nexport default NewsList;","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Search extends Component {\r\n    state = { \r\n        category: 'business'\r\n    }\r\n\r\n    changeCategory = e => {\r\n       this.setState({\r\n        category : e.target.value\r\n       }, () => {\r\n        this.props.reviewNew(this.state.category);\r\n       })      \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"search row\">\r\n                <div className=\"col s12 m8 offset-m2\">\r\n                    <form>\r\n                        <h2>Find News by Category</h2>\r\n                        <div className=\"input-field col s12 offset-m2\">\r\n                            <select onChange={ this.changeCategory }>\r\n                                <option value=\"business\">Business</option>\r\n                                <option value=\"entertainment\">Entertainment</option>\r\n                                <option value=\"general\">General</option>\r\n                                <option value=\"health\">Health</option>\r\n                                <option value=\"science\">Science</option>\r\n                                <option value=\"sports\">Sports</option>\r\n                                <option value=\"technology\">Technology</option>\r\n                            </select>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nSearch.propTypes = {\r\n    reviewNew : PropTypes.func.isRequired\r\n}\r\n\r\nexport default Search;","import React, { Component, Fragment } from 'react';\nimport Header from './components/header';\nimport NewsList  from './components/newsList';\nimport Search  from './components/search';\n\nclass App extends Component{\n  state = { \n    news : []\n  }\n\n  componentDidMount(){\n    this.checkNews();\n  }\n\n  checkNews = async ( category = 'business') => {\n    const url = `https://newsapi.org/v2/top-headlines?country=us&category=${ category }&apiKey=f9909a85725b46bfadc41a2ee5c6de63`;\n    const result = await fetch(url);\n    const newsJson = await result.json();\n\n    this.setState({\n      news : newsJson.articles\n    })\n  }\n\n  render(){\n    return ( \n      <Fragment>\n        <Header title='Search News'></Header>\n        <div className=\"container white news-container\">\n          <Search reviewNew={ this.checkNews }></Search>\n          <NewsList news={ this.state.news }></NewsList>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}